//
//  ViewController.swift
//  GoStruct
//
//  Created by kingcheung on 31/8/2019.
//  Copyright Â© 2019 kingcheung. All rights reserved.
//

import Cocoa
import Highlightr

class ViewController: NSViewController {
    
    private var indent = "    "
    

    @IBOutlet weak var structName: NSTextField!
    @IBOutlet var input: NSTextView!
    
    @IBOutlet var resultView: NSTextView!
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.window?.isRestorable = false
        self.view.window?.setContentSize(NSSize(width: 800, height: 600))
        resultView.isEditable = false
        input.isAutomaticQuoteSubstitutionEnabled = false
        // Do any additional setup after loading the view.
    }

    @IBAction func setName(_ sender: NSTextField){
        generated(name: sender.stringValue)
    }
    override var representedObject: Any? {
        didSet {
        // Update the view, if already loaded.
        }
    }

    @IBAction func inlineType(_ sender: NSButton) {
        print(sender.state.rawValue)
    }

}

extension ViewController:NSTextViewDelegate {
    func textDidChange(_ notification: Notification) {
        let view = notification.object as! NSTextView
        print(view.string)
        
        if input.isEditable {
            var name = ""
            if structName.stringValue == "" {
                name = "AutoGenerated"
            }else {
                name = structName.stringValue
            }
            generated(name: name)
        }
        
        //input.textStorage?.setAttributedString(highlighted(source: input.string, language: "json"))
        
    }

    
    
    func textShouldEndEditing(_ textObject: NSText) -> Bool {
        
        return true
    }
    
    func generated(name structName:String){
        let jsonObj = Json.object(with: input.string)
        var result = Json.convert(jsonObj, to: structName)
        
        result = "type " + result
       
        //resultView.string = result
        resultView.textStorage?.setAttributedString(highlighted(source: result, language: "golang"))
    }
    
    
    func highlighted(source:String,language type :String)->NSAttributedString{
        let highlightr = Highlightr()
        highlightr?.setTheme(to: "xcode")
        let code = highlightr?.highlight(source, as: type, fastRender: false)
        return code!
    }
    

}


